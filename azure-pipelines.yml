trigger:
- master   # -> mets 'main' si ta branche s'appelle main

pool:
  vmImage: 'ubuntu-latest'

variables:
  PYTHON_VERSION: '3.10'

steps:
# 1) Python
- task: UsePythonVersion@0
  displayName: 'Use Python $(PYTHON_VERSION)'
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    addToPath: true

# 2) Dépendances dans .python_packages à la RACINE du repo (là où est requirements.txt)
- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt --target=".python_packages/lib/site-packages"
  displayName: 'Install deps → .python_packages/'

# 3) (Sécurité) enlever une config locale éventuelle
- script: |
    if [ -f local.settings.json ]; then rm local.settings.json; fi
  displayName: 'Remove local.settings.json if present'

# 4) Staging minimal (host.json + code + deps)
- task: CopyFiles@2
  displayName: 'Stage files for package'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      host.json
      requirements.txt
      shared.py
      **/*.py
      .python_packages/**/*
      !.git/**/*
      !.vscode/**/*
      !**/__pycache__/**/*
      !**/*.pyc
      !**/.venv/**/*
    TargetFolder: '$(Build.ArtifactStagingDirectory)/package'

# 5) ZIP déployable
- task: ArchiveFiles@2
  displayName: 'Zip package'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/package'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/functionapp.zip'
    replaceExistingArchive: true

# 6) Publier l’artefact
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact'
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'drop'
    publishLocation: 'Container'
